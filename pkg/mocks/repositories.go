// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/contracts.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	request "github.com/alirezadp10/hokm/pkg/api/request"
	model "github.com/alirezadp10/hokm/pkg/model"
	repository "github.com/alirezadp10/hokm/pkg/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockCardsRepositoryContract is a mock of CardsRepositoryContract interface.
type MockCardsRepositoryContract struct {
	ctrl     *gomock.Controller
	recorder *MockCardsRepositoryContractMockRecorder
}

// MockCardsRepositoryContractMockRecorder is the mock recorder for MockCardsRepositoryContract.
type MockCardsRepositoryContractMockRecorder struct {
	mock *MockCardsRepositoryContract
}

// NewMockCardsRepositoryContract creates a new mock instance.
func NewMockCardsRepositoryContract(ctrl *gomock.Controller) *MockCardsRepositoryContract {
	mock := &MockCardsRepositoryContract{ctrl: ctrl}
	mock.recorder = &MockCardsRepositoryContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardsRepositoryContract) EXPECT() *MockCardsRepositoryContractMockRecorder {
	return m.recorder
}

// PlaceCard mocks base method.
func (m *MockCardsRepositoryContract) PlaceCard(ctx context.Context, params repository.PlaceCardParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceCard", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlaceCard indicates an expected call of PlaceCard.
func (mr *MockCardsRepositoryContractMockRecorder) PlaceCard(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceCard", reflect.TypeOf((*MockCardsRepositoryContract)(nil).PlaceCard), ctx, params)
}

// SetTrump mocks base method.
func (m *MockCardsRepositoryContract) SetTrump(ctx context.Context, gameID, trump, uIndex, lastMoveTimestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTrump", ctx, gameID, trump, uIndex, lastMoveTimestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTrump indicates an expected call of SetTrump.
func (mr *MockCardsRepositoryContractMockRecorder) SetTrump(ctx, gameID, trump, uIndex, lastMoveTimestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrump", reflect.TypeOf((*MockCardsRepositoryContract)(nil).SetTrump), ctx, gameID, trump, uIndex, lastMoveTimestamp)
}

// MockGameRepositoryContract is a mock of GameRepositoryContract interface.
type MockGameRepositoryContract struct {
	ctrl     *gomock.Controller
	recorder *MockGameRepositoryContractMockRecorder
}

// MockGameRepositoryContractMockRecorder is the mock recorder for MockGameRepositoryContract.
type MockGameRepositoryContractMockRecorder struct {
	mock *MockGameRepositoryContract
}

// NewMockGameRepositoryContract creates a new mock instance.
func NewMockGameRepositoryContract(ctrl *gomock.Controller) *MockGameRepositoryContract {
	mock := &MockGameRepositoryContract{ctrl: ctrl}
	mock.recorder = &MockGameRepositoryContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameRepositoryContract) EXPECT() *MockGameRepositoryContractMockRecorder {
	return m.recorder
}

// GetGameInformation mocks base method.
func (m *MockGameRepositoryContract) GetGameInformation(ctx context.Context, gameID string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameInformation", ctx, gameID)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameInformation indicates an expected call of GetGameInformation.
func (mr *MockGameRepositoryContractMockRecorder) GetGameInformation(ctx, gameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameInformation", reflect.TypeOf((*MockGameRepositoryContract)(nil).GetGameInformation), ctx, gameID)
}

// Matchmaking mocks base method.
func (m *MockGameRepositoryContract) Matchmaking(ctx context.Context, cards map[int][]string, username, gameID, lastMoveTimestamps, king, kingCards string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Matchmaking", ctx, cards, username, gameID, lastMoveTimestamps, king, kingCards)
}

// Matchmaking indicates an expected call of Matchmaking.
func (mr *MockGameRepositoryContractMockRecorder) Matchmaking(ctx, cards, username, gameID, lastMoveTimestamps, king, kingCards interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Matchmaking", reflect.TypeOf((*MockGameRepositoryContract)(nil).Matchmaking), ctx, cards, username, gameID, lastMoveTimestamps, king, kingCards)
}

// RemovePlayerFromWaitingList mocks base method.
func (m *MockGameRepositoryContract) RemovePlayerFromWaitingList(ctx context.Context, key, username string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemovePlayerFromWaitingList", ctx, key, username)
}

// RemovePlayerFromWaitingList indicates an expected call of RemovePlayerFromWaitingList.
func (mr *MockGameRepositoryContractMockRecorder) RemovePlayerFromWaitingList(ctx, key, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePlayerFromWaitingList", reflect.TypeOf((*MockGameRepositoryContract)(nil).RemovePlayerFromWaitingList), ctx, key, username)
}

// MockPlayersRepositoryContract is a mock of PlayersRepositoryContract interface.
type MockPlayersRepositoryContract struct {
	ctrl     *gomock.Controller
	recorder *MockPlayersRepositoryContractMockRecorder
}

// MockPlayersRepositoryContractMockRecorder is the mock recorder for MockPlayersRepositoryContract.
type MockPlayersRepositoryContractMockRecorder struct {
	mock *MockPlayersRepositoryContract
}

// NewMockPlayersRepositoryContract creates a new mock instance.
func NewMockPlayersRepositoryContract(ctrl *gomock.Controller) *MockPlayersRepositoryContract {
	mock := &MockPlayersRepositoryContract{ctrl: ctrl}
	mock.recorder = &MockPlayersRepositoryContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayersRepositoryContract) EXPECT() *MockPlayersRepositoryContractMockRecorder {
	return m.recorder
}

// AddPlayerToGame mocks base method.
func (m *MockPlayersRepositoryContract) AddPlayerToGame(username, gameID string) (*model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayerToGame", username, gameID)
	ret0, _ := ret[0].(*model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlayerToGame indicates an expected call of AddPlayerToGame.
func (mr *MockPlayersRepositoryContractMockRecorder) AddPlayerToGame(username, gameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayerToGame", reflect.TypeOf((*MockPlayersRepositoryContract)(nil).AddPlayerToGame), username, gameID)
}

// CheckPlayerExistence mocks base method.
func (m *MockPlayersRepositoryContract) CheckPlayerExistence(username string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPlayerExistence", username)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPlayerExistence indicates an expected call of CheckPlayerExistence.
func (mr *MockPlayersRepositoryContractMockRecorder) CheckPlayerExistence(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPlayerExistence", reflect.TypeOf((*MockPlayersRepositoryContract)(nil).CheckPlayerExistence), username)
}

// DoesPlayerBelongToGame mocks base method.
func (m *MockPlayersRepositoryContract) DoesPlayerBelongToGame(username, gameID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesPlayerBelongToGame", username, gameID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesPlayerBelongToGame indicates an expected call of DoesPlayerBelongToGame.
func (mr *MockPlayersRepositoryContractMockRecorder) DoesPlayerBelongToGame(username, gameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesPlayerBelongToGame", reflect.TypeOf((*MockPlayersRepositoryContract)(nil).DoesPlayerBelongToGame), username, gameID)
}

// DoesPlayerHaveAnyActiveGame mocks base method.
func (m *MockPlayersRepositoryContract) DoesPlayerHaveAnyActiveGame(username string) (*string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesPlayerHaveAnyActiveGame", username)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// DoesPlayerHaveAnyActiveGame indicates an expected call of DoesPlayerHaveAnyActiveGame.
func (mr *MockPlayersRepositoryContractMockRecorder) DoesPlayerHaveAnyActiveGame(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesPlayerHaveAnyActiveGame", reflect.TypeOf((*MockPlayersRepositoryContract)(nil).DoesPlayerHaveAnyActiveGame), username)
}

// HasGameFinished mocks base method.
func (m *MockPlayersRepositoryContract) HasGameFinished(gameID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasGameFinished", gameID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasGameFinished indicates an expected call of HasGameFinished.
func (mr *MockPlayersRepositoryContractMockRecorder) HasGameFinished(gameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasGameFinished", reflect.TypeOf((*MockPlayersRepositoryContract)(nil).HasGameFinished), gameID)
}

// SavePlayer mocks base method.
func (m *MockPlayersRepositoryContract) SavePlayer(user request.User, chatId int64) (*model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePlayer", user, chatId)
	ret0, _ := ret[0].(*model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePlayer indicates an expected call of SavePlayer.
func (mr *MockPlayersRepositoryContractMockRecorder) SavePlayer(user, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePlayer", reflect.TypeOf((*MockPlayersRepositoryContract)(nil).SavePlayer), user, chatId)
}
