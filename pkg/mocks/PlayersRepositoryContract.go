// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "github.com/alirezadp10/hokm/pkg/model"
	mock "github.com/stretchr/testify/mock"

	request "github.com/alirezadp10/hokm/pkg/api/request"
)

// PlayersRepositoryContract is an autogenerated mock type for the PlayersRepositoryContract type
type PlayersRepositoryContract struct {
	mock.Mock
}

// AddPlayerToGame provides a mock function with given fields: username, gameID
func (_m *PlayersRepositoryContract) AddPlayerToGame(username string, gameID string) (*model.Game, error) {
	ret := _m.Called(username, gameID)

	var r0 *model.Game
	if rf, ok := ret.Get(0).(func(string, string) *model.Game); ok {
		r0 = rf(username, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckPlayerExistence provides a mock function with given fields: username
func (_m *PlayersRepositoryContract) CheckPlayerExistence(username string) bool {
	ret := _m.Called(username)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SavePlayer provides a mock function with given fields: user, chatId
func (_m *PlayersRepositoryContract) SavePlayer(user request.User, chatId int64) (*model.Player, error) {
	ret := _m.Called(user, chatId)

	var r0 *model.Player
	if rf, ok := ret.Get(0).(func(request.User, int64) *model.Player); ok {
		r0 = rf(user, chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Player)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.User, int64) error); ok {
		r1 = rf(user, chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPlayersRepositoryContract interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlayersRepositoryContract creates a new instance of PlayersRepositoryContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlayersRepositoryContract(t mockConstructorTestingTNewPlayersRepositoryContract) *PlayersRepositoryContract {
	mock := &PlayersRepositoryContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
